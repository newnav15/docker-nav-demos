****************************************
Windows
****************************************
1)	Install the Docker tool box
2)	Run mvn clean package from outside
3)	Run java –jar <jarname>
4)	http://localhost:8080   check working
5)	Package in docker
		Run the C:\Users\NRajagopalan\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Docker quickstart
		https://docs.docker.com/docker-for-windows/  if you need from cmd else do it from docker quickstart
6)	Spotify method 
a.	docker ps
b.	Run mvn install dockerfile:build
c.	docker run -p 8080:8080 -t springio/gs-spring-boot-docker
d.	http://192.168.99.100:8080/ 
****************************************
Ubuntu
****************************************
http://dev-pages.info/how-to-run-spring-boot-and-mongodb-in-docker-container/

1) Host Setup:
	a) Download the image for ubuntu: from https://www.ubuntu.com/download/
	b) Setup a ubuntu VM with virtual box ie hypervisor
		* host only adaptor
		* storage - empty - select downloaded iso
		* start VM - chose english
		* default option first few screens
		* all default
		* enter hostname properly 
		* naveen/naveen15
	c) Install JDK on the ubuntu: 
		sudo apt-get update
		sudo apt-get install default-jre
		sudo apt-get install java-package.
		sudo apt-get install default-jdk

2) Docker Setup on host:
		* apt-get update
		* apt-get install -y docker.io
		* service docker.io status
		* docker version
		* docker info to know number of containers and images
		* OPTIONAL: incase you need to update docker : wget -q0 https://get.docker.com/gpg | apt-key add -naveen
		naveen15
		* OPTIONAL add docker repo : echo deb http://get.docker.com/ubuntu docker main > etc/apt/sources.list.d/docker.list
		* apt-get update
		* OPTIONAL apt-get install install lxc-docker
		* OPTIONAL incase space issue https://askubuntu.com/questions/944588/apt-get-f-install-no-space-left-on-device-ubuntu-14-04
		
3) Docker know hows:
	sudo docker images
	docker system prune will remove all
	remove containers: docker rm $(docker ps -aq)
	remove images: docker rmi $(docker images -q)
	docker inspect spring-demo-mongo | grep IPAddress
	docker ps -a gets stopped containers
	docker-machine ls
	### Example #3 ###
	# As of Docker v1.3 you can attach to a bash shell
	docker exec -it  2e23d01384ac  bash
	
	
4) Container pre-requisites:
	
	a) Setting up network for containers to talk to each other:
			docker network create spring_demo_net 

	b) Setup volume:
			mkdir -p ~/mongo-data  

5) Create/Start Mongo Container:
	* docker run --name spring-demo-mongo -p 27017:27017 --network=spring_demo_net -v /home/ubuntu/mongo-data:/data/db -d mongo 
	* check if running : docker ps
	OR
	* docker ps -a
	* dockdocker start -ai 11cc47339ee1er 
	
	* connect the client with the IP/Host IP
	* with hypervisor ensure port forwarding is done for mongo port to access from outside

6) Application Build and Test
	a) Get the project to build: git clone https://github.com/oneils/springboot-mongo-demo.git
	b) Build the project to generate the executable jar: ./gradlew clean build && cp build/libs/springboot-mongo-demo.jar docker/
	c) To run project: java -jar build/libs/springboot-mongo-demo.jar
	d)Test the application : 
		* Go to http://localhost:9000 see application running
		* http://localhost:9000/api/users 
	
7) Containerisation:
	a) Build Image: cd docker && docker build --tag=spring-demo-1.0 .
	b) Run build jar file in docker : docker run -d --name spring-demo --network=spring_demo_net -p 9000:9000  spring-demo-1.0  
	c) Open http://localhost:9000 
	d) docker logs spring-demo-mongo and docker logs spring-demo
       
	

docker run -d --name spring-demo --network=spring_demo_net -p 9000:9000  spring-demo-1.0  

https://medium.com/@sunnykay/docker-development-workflow-node-express-mongo-4bb3b1f7eb1e
http://blog.mpayetta.com/node.js/docker/mongodb/2016/09/04/dockerizing-node-mongo-app/ 
***************************************************************
1) Create the app C:\Users\NRajagopalan\node-demo\node-demo

2) npm install and npm start - try on local

3) Now containerise - create docker file. Run build: docker build -t node-demo .

4) docker images will show the image.  Run: docker run -p 3000:3000 -ti node-demo


https://www.reddit.com/r/docker/comments/5cjn65/questionsdoubt_connecting_to_a_mongodb_in_the/
https://blog.codecentric.de/en/2014/01/docker-networking-made-simple-3-ways-connect-lxc-containers/
http://networkstatic.net/10-examples-of-how-to-get-docker-container-ip-address/

